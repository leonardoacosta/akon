// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Event {
    id          String   @id @default(cuid())
    name        String
    description String
    startDate   DateTime
    endDate     DateTime
    location    String
    address     String
    city        String
    state       String
    zip         String
    hotels      Hotel[]
}

model Hotel {
    id      String @id @default(cuid())
    name    String
    address String
    city    String
    state   String
    zip     String

    rooms   Room[]
    event   Event  @relation(fields: [eventId], references: [id])
    eventId String
}

model Room {
    id          String @id @default(cuid())
    name        String
    description String
    capacity    Int

    hotel        Hotel          @relation(fields: [hotelId], references: [id])
    hotelId      String
    availability Availability[]
    panels       Panel[]
}

// Programming
model Availability {
    id        String @id @default(cuid())
    startTime String
    endTime   String

    room         Room?       @relation(fields: [roomId], references: [id])
    roomId       String?
    vendorHall   VendorHall? @relation(fields: [vendorHallId], references: [id])
    vendorHallId String?
}

model Panel {
    id           String    @id @default(cuid())
    name         String
    description  String
    start        DateTime
    end          DateTime
    approved     Boolean   @default(false)
    approvalSent DateTime?
    denied       Boolean   @default(false)
    deniedReason String?
    deniedSent   DateTime?

    eightteenPlus Boolean @default(false)

    group     Group       @relation(fields: [groupId], references: [id])
    groupId   String
    tagId     String
    rooms     Room?       @relation(fields: [roomId], references: [id])
    roomId    String?
    note      Note[]
    members   Member[]
    Panel_Tag Panel_Tag[]
}

model Tag {
    id         String      @id @default(cuid())
    name       String
    classNames String
    type       TagType     @default(PANEL)
    Group_Tag  Group_Tag[]
    Panel_Tag  Panel_Tag[]
}

enum TagType {
    GROUP
    PANEL
}

model Group_Tag {
    id      String @id @default(cuid())
    groupId String
    tagId   String
    group   Group  @relation(fields: [groupId], references: [id])
    tag     Tag    @relation(fields: [tagId], references: [id])
}

model Panel_Tag {
    id      String @id @default(cuid())
    panel   Panel  @relation(fields: [panelId], references: [id])
    tag     Tag    @relation(fields: [tagId], references: [id])
    panelId String
    tagId   String
}

model Group {
    id          String  @id @default(cuid())
    name        String
    description String
    approved    Boolean @default(false)

    panels  Panel[]
    members Member[]
    notes   Note[]

    Group_Tag Group_Tag[]
}

model Note {
    id        String   @id @default(cuid())
    userId    String
    note      String
    timestamp DateTime @default(now())

    panel   Panel?  @relation(fields: [panelId], references: [id])
    panelId String?
    group   Group?  @relation(fields: [groupId], references: [id])
    groupId String?
}

model Member {
    id      String  @id @default(cuid())
    userId  String
    group   Group   @relation(fields: [groupId], references: [id])
    groupId String
    active  Boolean @default(true)
    panel   Panel?  @relation(fields: [panelId], references: [id])
    panelId String?
}

// Vendor Hall
model VendorHall {
    id          String @id @default(cuid())
    name        String
    description String
    totalSlots  Int

    vendors     Vendor[]
    avilability Availability[]
}

model Vendor {
    id          String  @id @default(cuid())
    name        String
    description String
    address     String
    phone       String
    email       String
    website     String
    slotNumber  Int
    artist      Boolean @default(false)

    vendorHall   VendorHall? @relation(fields: [vendorHallId], references: [id])
    vendorHallId String?
}
